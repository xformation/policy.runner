# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use,
# for example application-dev.yml if you use the "dev" profile.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

management:
  endpoints:
    web:
      base-path: /management
      exposure:
        include: ['configprops', 'env', 'health', 'info', 'jhimetrics', 'logfile', 'loggers', 'prometheus', 'threaddump']
  endpoint:
    health:
      show-details: when-authorized
      roles: 'ROLE_ADMIN'
    jhimetrics:
      enabled: true
  info:
    git:
      mode: full
  health:
    mail:
      enabled: false # When using the MailService, configure an SMTP server and set this to true
  metrics:
    export:
      # Prometheus is the default metrics backend
      prometheus:
        enabled: true
        step: 60
    enable:
      http: true
      jvm: true
      logback: true
      process: true
      system: true
    distribution:
      percentiles-histogram:
        all: true
      percentiles:
        all: 0, 0.5, 0.75, 0.95, 0.99, 1.0
    tags:
      application: ${spring.application.name}
    web:
      server:
        auto-time-requests: true

spring:
  application:
    name: policy.runner
  profiles:
    # The commented value for `active` can be replaced with valid Spring profiles to load.
    # Otherwise, it will be filled in by maven when building the JAR file
    # Either way, it can be overridden by `--spring.profiles.active` value passed in the commandline or `-Dspring.profiles.active` set in `JAVA_OPTS`
    active: #spring.profiles.active#
  jackson:
    serialization:
      FAIL_ON_EMPTY_BEANS: false
  jmx:
    enabled: false
  messages:
    basename: i18n/messages
  main:
    allow-bean-definition-overriding: true
  mvc:
    favicon:
      enabled: false
    view:
      prefix: /WEB-INF/jsp/
      suffix: .jsp
  security:
    user:
      name: admin
      password: admin
      roles:
        - ADMIN
        - USER
  task:
    execution:
      thread-name-prefix: policy-runner-task-
      pool:
        core-size: 2
        max-size: 50
        queue-capacity: 10000
    scheduling:
      thread-name-prefix: policy-runner-scheduling-
      pool:
        size: 2
  thymeleaf:
    mode: HTML
  datasource:
    url: jdbc:postgresql://localhost:5432/synectiks
    username: postgres
    password: postgres
  jpa:
    generate-ddl: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    hibernate:
      ddl-auto: update

server:
  servlet:
    session:
      cookie:
        http-only: true

# Properties to be exposed on the /info management endpoint
info:
  # Comma separated list of profiles that will trigger the ribbon to show
  display-ribbon-on-profiles: 'dev'

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  clientApp:
    name: 'policyRunnerApp'
  # By default CORS is disabled. Uncomment to enable.
  # cors:
  #     allowed-origins: "*"
  #     allowed-methods: "*"
  #     allowed-headers: "*"
  #     exposed-headers: "Authorization,Link,X-Total-Count"
  #     allow-credentials: true
  #     max-age: 1800
  mail:
    from: policy.runner@localhost
  swagger:
    default-include-pattern: /api/.*
    title: policy.runner API
    description: policy.runner API documentation
    version: 0.0.1
    terms-of-service-url:
    contact-name:
    contact-url:
    contact-email:
    license:
    license-url:
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

# application:
#server.port=8098
#
## Configure json mapper for rest apis
#spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false
#
#spring.mvc.view.prefix=/WEB-INF/jsp/
#spring.mvc.view.suffix=.jsp
#logging.level.org.springframework.web=INFO
#
##synectiks.search.url=http://localhost:8092
synectiks:
  search:
    url: http://localhost:8092
    savedocs: /saveDocs
  states:
    file: statesJsonDef.json
  customer:
    table:
      prefix: rajesh
#
## default json file name for default states definition.
#synecticks.states.file=statesJsonDef.json
#
## DynamoDB connection url
#amazon:
#  dynamodb:
#    endpoint: http://100.81.5.25:8000/
##amazon.dynamodb.endpoint = http://${AWS_ENDPOINT}/
#
## Set customer id or name to make unique tables for customer.
#synecticks.customer.table.prefix = rajesh
#multitenant:
#  context:
#    key: mtTable

